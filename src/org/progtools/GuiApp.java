/*
 * GuiApp.java
 * Main Application Window
 * Copyright (C) 2006  Paulo Pinto
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */
package org.progtools;

import java.awt.HeadlessException;
import javax.swing.JFileChooser;
import javax.swing.JTextField;
import javax.swing.UIManager;

/**
 * Application main window.
 * @author  Paulo Pinto
 */
public class GuiApp extends javax.swing.JFrame {
    
    /**
     * Creates the main application frame.
     */
    public GuiApp() {
        initComponents();
        
        // Center the application window
        setLocationRelativeTo(null);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        srcDirTxt = new javax.swing.JTextField();
        destDirTxt = new javax.swing.JTextField();
        msgTxt = new javax.swing.JTextField();
        imgSizeSlider = new javax.swing.JSlider();
        srcBrowseBtn = new javax.swing.JButton();
        destBrowseBtn = new javax.swing.JButton();
        quitBtn = new javax.swing.JButton();
        processBtn = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Select the Images to Process");
        jLabel1.setText("Source Directory:");

        jLabel2.setText("Target Directory:");

        jLabel3.setText("Copyright Message:");

        jLabel4.setText("Image Size:");

        imgSizeSlider.setMajorTickSpacing(10);
        imgSizeSlider.setPaintLabels(true);
        imgSizeSlider.setPaintTicks(true);

        srcBrowseBtn.setText("Browse...");
        srcBrowseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                srcBrowseBtnActionPerformed(evt);
            }
        });

        destBrowseBtn.setText("Browse...");
        destBrowseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                destBrowseBtnActionPerformed(evt);
            }
        });

        quitBtn.setText("Quit");
        quitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitBtnActionPerformed(evt);
            }
        });

        processBtn.setText("Process");
        processBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processBtnActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(36, 36, 36)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel1)
                    .add(jLabel2)
                    .add(jLabel3)
                    .add(jLabel4))
                .add(10, 10, 10)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(imgSizeSlider, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(msgTxt)
                    .add(destDirTxt)
                    .add(srcDirTxt, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 240, Short.MAX_VALUE))
                .add(28, 28, 28)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(srcBrowseBtn)
                    .add(destBrowseBtn))
                .addContainerGap())
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(jSeparator1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 473, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap(361, Short.MAX_VALUE)
                .add(processBtn)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(quitBtn)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(29, 29, 29)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(srcBrowseBtn)
                    .add(srcDirTxt, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(24, 24, 24)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(destDirTxt, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(destBrowseBtn))
                .add(31, 31, 31)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel3)
                    .add(msgTxt, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(20, 20, 20)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel4)
                    .add(imgSizeSlider, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jSeparator1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 34, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(quitBtn)
                    .add(processBtn))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * Starts the processing of the images.
     * @param evt The swing event for the pressed button
     */
    private void processBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processBtnActionPerformed
        final ProgressDlg dialog = new ProgressDlg(this, false);
        dialog.setVisible(true);
        
        final ImageProcessor processor = new ImageProcessor(destDirTxt.getText(), msgTxt.getText());
        processor.addImageProcessorListener(dialog);
        
        // Run this in a background thread so that the UI is
        // free to process events
        Thread processorThread = new Thread() {
            public void run() {
                processor.processFiles(srcDirTxt.getText(), imgSizeSlider.getValue());
                processor.removeImageProcessorListener(dialog);
                dialog.dispose();
            }
        };
        processorThread.start();
    }//GEN-LAST:event_processBtnActionPerformed
    
    /**
     * Allows the user to select the destination directory for the images.
     * @param evt The swing event for the pressed button
     */
    private void destBrowseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_destBrowseBtnActionPerformed
        browseDirectory(destDirTxt);
    }//GEN-LAST:event_destBrowseBtnActionPerformed
    
    /**
     * Allows the user to select the source directory for the images.
     * @param evt The swing event for the pressed button
     */
    private void srcBrowseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_srcBrowseBtnActionPerformed
        browseDirectory(srcDirTxt);
    }//GEN-LAST:event_srcBrowseBtnActionPerformed
    
    /**
     * Shows the file open dialog box for the user to choose a directory.
     * If one is selected, the pathname is assigned to the given field.
     * @param field Where to assign the pathname of the chosen directory
     */
    private void browseDirectory(JTextField field) throws HeadlessException {
        JFileChooser chooser = new JFileChooser();
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int returnVal = chooser.showOpenDialog(this);
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            field.setText(chooser.getSelectedFile().getPath());
        }
    }
    
    /**
     * Releases the application, thus closing it.
     * @param evt The swing event for the pressed button
     */
    private void quitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitBtnActionPerformed
        dispose();
    }//GEN-LAST:event_quitBtnActionPerformed
    
    /**
     * Standard main application entry point
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            // Set System L&F
            UIManager.setLookAndFeel(
                    UIManager.getSystemLookAndFeelClassName());
        } catch (Exception e) {
            System.out.println("Error while trying to set the system look and feel! : " + e.getMessage());
        }
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GuiApp().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton destBrowseBtn;
    private javax.swing.JTextField destDirTxt;
    private javax.swing.JSlider imgSizeSlider;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField msgTxt;
    private javax.swing.JButton processBtn;
    private javax.swing.JButton quitBtn;
    private javax.swing.JButton srcBrowseBtn;
    private javax.swing.JTextField srcDirTxt;
    // End of variables declaration//GEN-END:variables
}
